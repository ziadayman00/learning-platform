generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  courses       Course[]
  purchases     Purchase[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String   @db.Text
  thumbnail   String?
  price       Float
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  purchases Purchase[]
  reviews   Review[]
  category  Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([instructorId])
  @@index([categoryId])
  @@index([slug])
  @@map("courses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]

  @@map("categories")
}

model Purchase {
  id            String   @id @default(cuid())
  userId        String
  courseId      String
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("purchases")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5)
  comment   String?  @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("reviews")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}