// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  courses       Course[]
  purchases     Purchase[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
  lessonProgress LessonProgress[]  // ‚Üê Add this line

  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String   @db.Text
  thumbnail   String?
  price       Float
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  purchases Purchase[]
  reviews   Review[]
  sections  Section[]

  @@index([instructorId])
  @@index([categoryId])
  @@index([slug])
  @@map("courses")
}


model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]

  @@map("categories")
}

model Purchase {
  id              String        @id @default(cuid())
  userId          String
  courseId        String
  amount          Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?       // Stripe Payment Intent ID
  stripeSessionId String?       // ADD THIS - Stripe Checkout Session ID
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("purchases")
}


model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5)
  comment   String?  @db.Text
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("reviews")
}

model Section {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  position    Int      // Order: 1, 2, 3...
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId])
  @@index([position])
  @@map("sections")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  videoUrl    String   // URL from video hosting service
  duration    Int?     // Duration in seconds
  position    Int      // Order within section: 1, 2, 3...
  isFree      Boolean  @default(false) // Allow free preview
  sectionId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section  Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress LessonProgress[]

  @@index([sectionId])
  @@index([position])
  @@map("lessons")
}

model LessonProgress {
  id           String   @id @default(cuid())
  userId       String
  lessonId     String
  isCompleted  Boolean  @default(false)
  lastPosition Int      @default(0) // Video playback position in seconds
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("lesson_progress")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}